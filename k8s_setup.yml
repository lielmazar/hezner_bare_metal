- name: Kubernetes control plane setup
  hosts: myhosts
  gather_facts: false
  vars_prompt:
    - name: luks_passphrase
      prompt: "Enter LUKS disk encryption passphrase"
      private: true

  vars:
    local_public_key: "{{ lookup('env','HOME') }}/.ssh/id_ed25519.pub"
    local_private_key: "{{ lookup('env','HOME') }}/.ssh/id_ed25519"
    dropbear_port: 22
    crio_version: "v1.33"
    k8s_version: "v1.33"
    nodes_ip: "157.180.11.56"
    control_plane_dns: "kcp.cservices.co.il"

  pre_tasks:
    - name: Remove old SSH key for sv1.cservices.co.il
      delegate_to: localhost
      ansible.builtin.known_hosts:
        path: ~/.ssh/known_hosts
        name: sv1.cservices.co.il
        state: absent


    - name: Accept and store SSH host key permanently
      delegate_to: localhost
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            -p {{ dropbear_port | default(22) }} \
            root@{{ inventory_hostname }} "echo SSH key accepted"
      register: ssh_key_accept
      changed_when: false
      failed_when: false

  tasks:
    - name: Gather facts manually after cleanup
      ansible.builtin.setup:

    - name: Disable swap at runtime if enabled
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0
      changed_when: ansible_swaptotal_mb > 0

    - name: Comment out swap entries in /etc/fstab to disable swap permanently
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^(\s*[^#]\S+\s+\S+\s+swap\s+\S.*)$'
        replace: '# \1'

    - name: Enabling IPv4 packet forwarding
      ansible.builtin.copy:
        mode: '0644'
        dest: /etc/sysctl.d/99-k8s.conf
        content: |
          net.ipv4.ip_forward = 1

    - name: Apply sysctl settings # This will apply the settings immediately
      ansible.posix.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present  # Or absent for removal
        sysctl_file: /etc/sysctl.conf # Optional, specify if not using default
        reload: true   # Applies changes immediately
      become: true
      loop:
        - { name: 'net.ipv4.ip_forward', value: '1' }

    # Control plane nodes ports and protocols
    - name: Allow 6443/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 60000:61000
        proto: tcp

    - name: Allow 2379:2380/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 2379:2380
        proto: tcp

    - name: Allow 22/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 22
        proto: tcp

    - name: Allow 8080/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 8080
        proto: tcp

    - name: Allow 10250/tcp through firewall # Also for control plane node
      community.general.ufw:
        rule: allow
        port: 10250
        proto: tcp

    - name: Allow 10251/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 10251
        proto: tcp

    - name: Allow 10252/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 10252
        proto: tcp

    - name: Allow 10255/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 10255
        proto: tcp

    - name: Allow 5473/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 5473
        proto: tcp

    # Worker nodes ports and protocols
    - name: Allow 10256/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 10256
        proto: tcp

    - name: Allow 30000-32767/tcp through firewall
      community.general.ufw:
        rule: allow
        port: 30000:32767
        proto: tcp

    - name: Allow 30000-32767/udp through firewall
      community.general.ufw:
        rule: allow
        port: 30000:32767
        proto: udp

    - name: Enable the firewall
      community.general.ufw:
        state: enabled

    - name: Updating apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Instal dependencies
      ansible.builtin.apt:
        name:
          - software-properties-common
          - curl
          - apt-transport-https
          - ca-certificates
          - gpg
        state: present

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download CRI-O APT key
      ansible.builtin.get_url:
        url: "https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/Release.key"
        dest: /etc/apt/keyrings/cri-o-release.key
        mode: '0644'

    - name: Convert CRI-O APT key to GPG format
      ansible.builtin.command:
        cmd: "gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg /etc/apt/keyrings/cri-o-release.key"
      args:
        creates: /etc/apt/keyrings/cri-o-apt-keyring.gpg

    - name: Add CRI-O APT repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/cri-o.list
        content: |
          deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ crio_version }}/deb/ /
        mode: '0644'

    - name: Install CRI-O
      ansible.builtin.apt:
        name: cri-o
        state: present
        update_cache: true

    - name: Ensure CRI-O service is started and enabled
      ansible.builtin.service:
        name: crio
        state: started
        enabled: true

    - name: Download Kubernetes APT key
      ansible.builtin.get_url:
        url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/Release.key"
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.key
        mode: '0644'

    - name: Convert Kubernetes APT key to GPG format
      ansible.builtin.command:
        cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/kubernetes-apt-keyring.key"
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      ansible.builtin.copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
         deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/ /
        mode: '0644'

    - name: Install Kubernetes components
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true

    - name: Hold Kubernetes packages
      ansible.builtin.command:
        cmd: "apt-mark hold cri-o kubelet kubeadm kubectl"
      args:
        creates: "/var/lib/dpkg/info/kubelet.list"  # crude idempotency â€” file exists if installed
      register: apt_mark_result
      changed_when: "'hold' in apt_mark_result.stdout or 'hold' in apt_mark_result.stderr"

    - name: Reboot system
      ansible.builtin.command: reboot
      async: 1
      poll: 0
      ignore_errors: true  # since the SSH connection will drop
      register: reboot_result
      changed_when: true

    - name: Remove old SSH key for sv1.cservices.co.il before unlock
      ansible.builtin.known_hosts:
        path: ~/.ssh/known_hosts
        name: sv1.cservices.co.il
        state: absent
      delegate_to: localhost

    - name: Wait for dropbear SSH
      delegate_to: localhost
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: "{{ dropbear_port }}"
        timeout: 300
        state: started

    - name: Accept and store SSH host key permanently before unlock
      delegate_to: localhost
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            -p {{ dropbear_port | default(22) }} \
            root@{{ inventory_hostname }} "echo SSH key accepted"
      register: ssh_key_accept
      changed_when: false
      failed_when: false

    - name: Unlock encrypted disk
      delegate_to: localhost
      ansible.builtin.expect:
        command: >
          ssh -o StrictHostKeyChecking=no
              -o UserKnownHostsFile=/dev/null
              -p {{ dropbear_port }}
              -tt root@{{ inventory_hostname }} cryptroot-unlock
        responses:
          '.*unlock.*disk.*:': "{{ luks_passphrase }}"
      register: unlock_result
      failed_when: false   # Dropbear closes the connection after unlocking
      no_log: false        # Prevent logging sensitive information

    - name: Debug unlock result
      when: unlock_result is defined
      changed_when: true
      failed_when: false
      ansible.builtin.debug:
        msg: "Unlock result: {{ unlock_result }}"

    - name: Remove old SSH key for sv1.cservices.co.il after unlock
      ansible.builtin.known_hosts:
        path: ~/.ssh/known_hosts
        name: sv1.cservices.co.il
        state: absent
      delegate_to: localhost

    - name: Wait for SSH
      ansible.builtin.wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        timeout: 300
        state: started
      delegate_to: localhost

    - name: Accept and store SSH host key permanently after unlock
      delegate_to: localhost
      ansible.builtin.shell: |
        ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            -p {{ dropbear_port | default(22) }} \
            root@{{ inventory_hostname }} "echo SSH key accepted"
      register: ssh_key_accept
      changed_when: false
      failed_when: false

    - name: Initialize Kubernetes cluster
      ansible.builtin.command:
        cmd: "kubeadm init --apiserver-advertise-address={{ nodes_ip }} --control-plane-endpoint={{ control_plane_dns }}"
        creates: /etc/kubernetes/admin.conf

    - name: Ensure .kube directory exists in user's home
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0600'
        remote_src: true

    - name: Apply Calico operator CRDs
      ansible.builtin.command: >
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/operator-crds.yaml
      changed_when: false

    - name: Apply Calico Tigera operator
      ansible.builtin.command: >
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/tigera-operator.yaml
      changed_when: false

    - name: Apply Calico default configuration
      ansible.builtin.command: >
        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.2/manifests/custom-resources.yaml
      changed_when: false

    - name: Untaint control plane nodes to allow scheduling of non-control plane pods
      ansible.builtin.command: >
        kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      changed_when: false

    - name: Label node to exclude them from external load balancers
      ansible.builtin.command: >
        kubectl label nodes --all node.kubernetes.io/exclude-from-external-load-balancers-
      changed_when: false
